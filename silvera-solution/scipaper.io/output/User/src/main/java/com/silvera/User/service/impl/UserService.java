/**
    Use this file to implement business logic. This file will be preserved
    during next compilations.

    Generated by: silvera
    Date: 2022-05-17 21:23:19
*/

package com.silvera.User.service.impl;

import java.util.Optional;

import org.springframework.stereotype.Service;

import com.silvera.User.domain.model.*;
import com.silvera.User.exceptions.BadRequestException;
import com.silvera.User.exceptions.NotFoundException;
import com.silvera.User.exceptions.UnauthorizedException;
import com.silvera.User.repository.*;
import com.silvera.User.service.base.*;
import com.silvera.User.utils.TokenUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;



@Service
public class UserService implements IUserService {
    
    @Autowired
    PasswordEncoder passwordEncoder;

    @Autowired
    TokenUtils tokenUtils;
    
    @Autowired
    UserRepository userRepository;
    

    public UserService(){
        super();
    }

    // Auto-generated CRUD methods
    
    @Override
    public User createUser(User user){
        userRepository.findByUsername(user.getUsername())
          .ifPresent((u)->new BadRequestException("Username already exists"));
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    @Override
    public User readUser(java.lang.String id){
        Optional<User> opt = userRepository.findById(id);
        return opt.orElseThrow(()->new NotFoundException());
    }
    

    
    @Override
    public java.lang.String authenticate(java.lang.String username, java.lang.String password) {
        User user = userRepository.findByUsername(username)
            .orElseThrow(()->new UnauthorizedException("invalid username or password"));
        if (!passwordEncoder.matches(password, user.getPassword()))
            throw new UnauthorizedException("invalid username or password");
        return tokenUtils.generateToken(username);
    }

    
    @Override
    public java.lang.Boolean isLoggedIn(java.lang.String token) {
        return tokenUtils.getUsernameFromToken(token) != null;
    }
    
    
    @Override
    public java.lang.String getName(java.lang.String token) {
        String username = tokenUtils.getUsernameFromToken(token);
        if (username == null) return "";
        User user = userRepository.findByUsername(username).orElse(null);
        if (user == null) return "";
        return username+" "+user.getFirstName()+" "+user.getLastName();
    }

}