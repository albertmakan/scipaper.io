/**
    Use this file to implement business logic. This file will be preserved
    during next compilations.

    Generated by: silvera
    Date: 2022-05-17 21:23:19
*/

package com.silvera.SciPaper.service.impl;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import com.silvera.SciPaper.domain.model.*;
import com.silvera.SciPaper.exceptions.NotFoundException;
import com.silvera.SciPaper.exceptions.UnauthorizedException;
import com.silvera.SciPaper.service.base.*;
import com.silvera.SciPaper.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;

import com.silvera.SciPaper.service.dependencies.*;


@Service
public class SciPaperService implements ISciPaperService {

    @Autowired
    PaperRepository paperRepository;
    
    @Autowired
    UserClient userClient;

    @Autowired
    KafkaTemplate<String, com.silvera.SciPaper.messages.publishmsggroup.PaperPublished> publishmsggroupPaperPublishedKafkaTemplate;
    

    // Auto-generated CRUD methods
    
    @Override
    public Paper createPaper(Paper paper){
        return paperRepository.save(paper);
    }
    
    
    @Override
    public Paper updatePaper(java.lang.String id, Paper paperUpdate){
        Paper paper = paperRepository.findById(id).orElseThrow(()->new NotFoundException());
        if (!paper.getAuthorId().equals(paperUpdate.getAuthorId()))
            throw new UnauthorizedException("author cannot update someone elses paper");
        paperRepository.save(paperUpdate);
        return paperUpdate;
    }
    
    
    @Override
    public Paper readPaper(java.lang.String id){
        Optional<Paper> opt = paperRepository.findById(id);
        return opt.orElseThrow(IllegalArgumentException::new);
    }
    
    
    @Override
    public void deletePaper(java.lang.String id){
        Optional<Paper> opt = paperRepository.findById(id);
        Paper entity = opt.orElseThrow(IllegalArgumentException::new);
        paperRepository.delete(entity);
    }
    
    
    
    @Override
    public java.util.List<Paper> getAllByAuthor(java.lang.String authorId){
        return paperRepository.getAllByAuthorId(authorId);
    }
    

    @Override
    public void publish(String paperId, String authorId){
        Paper paper = paperRepository.findById(paperId).orElseThrow(()->new NotFoundException(paperId+" paper not found"));
        if (!paper.getAuthorId().equals(authorId))
            throw new UnauthorizedException("author cannot publish someone elses paper");
        com.silvera.SciPaper.messages.publishmsggroup.PaperPublished msg = new com.silvera.SciPaper.messages.publishmsggroup.PaperPublished();
        msg.setAuthor(paper.getAuthor());
        msg.setPaperId(paperId);
        msg.setTitle(paper.getTitle());
        publishmsggroupPaperPublishedKafkaTemplate.send("PUBLISH_PAPER", msg);
    }


    public void checkAuthorized(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            if (!userClient.isLoggedIn(authHeader.substring(7)))
                throw new UnauthorizedException();
        } else {
            throw new UnauthorizedException();
        }
    }

    public String getUsername(HttpServletRequest request) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String n = userClient.getName(authHeader.substring(7));
            String[] ns = n.split(" ", 2);
            if (ns.length == 2) return ns[0];
        }
        return null;
    }

    public void setAuthorForPaper(HttpServletRequest request, Paper paper) {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String n = userClient.getName(authHeader.substring(7));
            String[] ns = n.split(" ", 2);
            if (ns.length == 2) {
                paper.setAuthorId(ns[0]);
                paper.setAuthor(ns[1]);
                return;
            }
        }
        paper.setAuthorId("");
        paper.setAuthor("");
    }
      
}